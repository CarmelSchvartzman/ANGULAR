using System.Runtime.Caching;           //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

namespace DELETE191205.Controllers
{
    public class ValuesController : ApiController
    {
        public Friend[] a { get; set; }
        // GET api/values
        [OutputCache(Duration = 1000, Location = System.Web.UI.OutputCacheLocation.Any, VaryByParam = "none")] // DO NOT WORK!!!
        public IHttpActionResult Get()
        {

            if (MemoryCache.Default["a"] == null)           //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            {
                a = new Friend[] { new Friend() { id = 0, name = "Avi", email = "avi@a.a.il" }, new Friend() { id = 1, name = "Beni", email = "beni@b.b.il" } };
                MemoryCache.Default["a"] = a;           //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            }
            a = MemoryCache.Default["a"] as Friend[];           //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            return Ok(new { d = a });// Json<Friend[]>( res);
        }
        
        
        
////////////////////////// 

import { Injectable, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Friend } from '../models/friends';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class Svc191205Service implements OnInit {
  public data: Friend[];
  ngOnInit(): void {

  }

  constructor(private http: HttpClient) { }

  public getData(): Observable<Friend[]> {

    return this.http.get<Friend[]>('http://localhost:63878/api/values');
  }

}


///////////////////////////////////

import { Component, OnInit } from '@angular/core';
import { Svc191205Service } from './svc191205.service';
import { Friend } from '../models/friends';

@Component({
  selector: 'app-use-svc',
  template: `
    <ol *ngFor='let f of friends'>
        <li>{{f.id}}</li>
        <li>{{f.name}}</li>
        <li>{{f.email}}</li>
        <li>{{f.phoneNumber}}</li>
    </ol>
    <button class='btn btn-success' (click)='Load()'>Reload</button>
    <button class='btn btn-error' (click)='Reset()'>Reset</button>
  `,
  styles: ['.btn{margin:3px}']
})
export class UseSvcComponent implements OnInit {
  friends: Friend[];

  constructor(private svc: Svc191205Service) { }

  ngOnInit() {
    this.Load();
  }

  Reset(): void {
    this.friends = null;
  }

  Load(): void {
    console.warn(this.svc.data);
    if (!this.svc.data) {
      this.svc.getData().subscribe((res) => {
        this.friends = res.d; 
        this.svc.data = this.friends;
      });
    } else { this.friends = this.svc.data; }
  }

}
